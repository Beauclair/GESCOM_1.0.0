package com.mincom.gescom.ui.admin.controleur;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;

import javax.faces.event.ActionEvent;
import javax.faces.model.SelectItem;

import com.mincom.gescom.be.admin.entity.utilisateur.TabSite;
import com.mincom.gescom.be.admin.entity.utilisateur.TabUsr;
import com.mincom.gescom.be.core.exception.GesComAppException;
import com.mincom.gescom.be.core.svco.base.IBaseSvco;
import com.mincom.gescom.ui.admin.util.AdminSvcoDeleguate;
import com.mincom.gescom.ui.admin.util.AdminTrt;
import com.mincom.gescom.ui.admin.vue.UsrVue;
import com.mincom.gescom.ui.core.base.DataValidationException;
import com.mincom.gescom.ui.core.base.GesComCtrl;
import com.mincom.gescom.ui.core.base.ServiceLocatorException;
import com.mincom.gescom.ui.core.base.Traitement;

public class UsrCtrl extends GesComCtrl<TabUsr, TabUsr>{
	
	/**
	 * Nom du Bean managé par JSF dans le fichier de Configuration 
	 */
	private static String nomManagedBean = "usrCtrl";
	
	private List<SelectItem> listeSite;
	
	//mapSitr
	private Map<String, TabSite> mapSite = new HashMap<String, TabSite>();
	
	public UsrCtrl(){		
		defaultVue = new UsrVue();		
	}
	
	/**
	 * Retourne le nom du Bean Managé par JSF dans le Fichier de Configuration
	 * Utilile pour ne pas avoir a ecrire le nom des Beans en dur dans le Code
	 * @return
	 */
	public String getNomManagedBean(){
		return nomManagedBean;
	}	
	
	public IBaseSvco<TabUsr> getEntitySvco() throws ServiceLocatorException{	
		return AdminSvcoDeleguate.getSvcoUsr();
	}
	
	public Class<UsrCtrl> getMyClass() {
		return UsrCtrl.class;
	}
	
	public String enregistrerModification(){
		try {
			getEntitySvco().modifier(defaultVue.getEntiteCourante());
		} catch (GesComAppException e) {
			e.printStackTrace();
		} catch (ServiceLocatorException e) {
			e.printStackTrace();
		}
		return "UsrDetails";
	}

	@Override
	public List<Traitement> getListeTraitements() {
		String v$codeEntite = "Usr";

		System.out.println("usrCtrl.getListeTraitements() ici il vaut : "
				+ v$codeEntite);
		// Ensemble des traitements standards
		Map<String, Traitement> v$mapTrt = new TreeMap<String, Traitement>(
				AdminTrt.getTrtStandards(v$codeEntite));
		listeTraitements = Traitement.getOrderedTrt(v$mapTrt);
		return listeTraitements;
	}

	@Override
	public  void  buildListeTraitement(){

		if(getMapTraitements() == null){
			setMapTraitements(AdminTrt.getTrtStandards("Usr")) ;
		}	
	}

	@Override
	public List<TabUsr> rechercherParCritere(TabUsr p$entity)
			throws GesComAppException {
		try {
			super.setTimeOfLastSearch();
			return AdminSvcoDeleguate.getSvcoUsr().rechercherParCritere(p$entity);
		} catch (ServiceLocatorException e) {
			e.printStackTrace();
		}catch (GesComAppException e) {
			GesComAppException sdr = new GesComAppException(e.getMessage());
			throw sdr;
		}
		return null;
	}
	
	@Override
	public void preEnregistrer() throws DataValidationException {
				
		String v$password  =  ((UsrVue)defaultVue).getPassword();
		
		// Si ns sommes en Création
		if(! defaultVue.getNavigationMgr().getEnModification()){
			// Vérification obligatoire 
			if(! defaultVue.getEntiteCourante().getCodPwd().equals(v$password)){				
				// Pas de traitement de création possible
				throw new DataValidationException("Echec de la vérification du mot de passe saisi");
			}
		}
		// Si par contre nous sommes en Modification 
		else {
			// Si le mot de passe a été  changé 
			if(! defaultVue.getEntiteTemporaire().getCodPwd().equals(defaultVue.getEntiteCourante().getCodPwd())){
				// Alors vérification de l'égalité 
				if (! defaultVue.getEntiteCourante().getCodPwd().equals(v$password)){					
					// Pas de traitement de modification possible
					throw new DataValidationException("Echec de la vérification du mot de passe saisi");
				}					
			}
		}	
	}
	
	public List<SelectItem> getListeSite() {

		if(listeSite == null){
			
			listeSite = new ArrayList<SelectItem>();
			
			List<TabSite> v$sites = null;
						
			// Critères de recherche des comptes de dépôt	
			TabSite v$critere = new TabSite();	
			
			// Recherche des comptes en BD 			
			try {
				v$sites = AdminSvcoDeleguate.getSvcoSite().rechercherTout(v$critere);
				System.out.println(">>>>>>>>>>>>>>>>>> " + v$sites);
			} 
			catch (Exception e) {
				System.out.println(">>>>>>>>>>>>>>>>>> exception >>>>>>>>>>>>>>");
				getLogger().error(e.getMessage(), e);
				e.printStackTrace();
			} 
			
			v$sites = (v$sites != null)? v$sites : new ArrayList<TabSite>();
			
			// Création de la liste des élements pour le comboBox
			for(TabSite v$site: v$sites){
				SelectItem v$item = new SelectItem(v$site.getCodSite(),v$site.getCodSite());
				listeSite.add(v$item);
				mapSite.put(v$site.getCodSite(), v$site);
			}
		}
		return listeSite;
	}
	
	public void updateLibSite(ActionEvent evt){
		getEntiteCourante().setLibSite(mapSite.get(getEntiteCourante().getCodSite()).getLibSite());
	}
	
}
